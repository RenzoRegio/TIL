On my last two TIL’s, I talked about the process of using Mailgun and send_mail. Now let’s talk about why we are saving it and then returning it. The question is: where is it going?
Image for post
The answer to where our verify_email is going to, is that it is going to our views.py where we are calling it after verifying that our user is not None (not in our database). As you can see below, we are using form_valid which is basically implying that “If the form is valid” then: continue with the process.
Note: I used a CBV (Class based view) for my form — but you can also make use of FBV’s (Function based views) if you prefer it to be that way.
Short introduction to FormView:
FormView much like any other CBV requires a template — and it actually looks for a template_name (It will show on the error what template_name it is looking for) but in our case, we can override that default and place our own template_name by specifying it. Next, FormView looks for a form_class (Which is basically our form that contains our form fields), we placed it there as well so Django will know where to look. The success_url is something quite new to me as well — and also using reverse_lazy. Success_url is basically the url as to where we will be redirected to if the login was successful (in this case, we will be redirected to our home page). Instead of using the redirect(reverse(“core:home)), we used reverse_lazy. Reverse_lazy is not exactly the same as reverse, though it takes us to the same endpoint. Reverse_lazy, unlike reverse, does not get called until we need it. If we use reverse, it will be called immediately — which then brings out an error which says: config.url does not have any patterns. So, again, to prevent this error we will use reverse_lazy to only call it once we need to — once the form is valid and after we return super().form_valid(form)
Image for post
First of all we are going to get our cleaned email and password. (Again, cleaned_data is what we get once Django is finished validating the data — always remember to return the cleaned_data). Next is authenticate: Authenticate is also another Django function where it takes on three arguments: request, username and password. Authenticate — if the user’s credentials are valid, then it will return a User object.
And if it doesn’t return as empty then we will send a verification email to the email that the user placed; using the function verify_email.
Image for post
Though, the user immediately redirected to the success_url; which is core:home. But the user will not be logged in yet.
